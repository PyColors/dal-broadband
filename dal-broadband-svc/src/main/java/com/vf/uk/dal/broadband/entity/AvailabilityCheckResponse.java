/*
 * Broadband APIs
 * Braod band API for anonymous and logged in customer
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vf.uk.dal.broadband.entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * AvailabilityCheckResponse
 */
public class AvailabilityCheckResponse {
	private String journeyId = null;

	private InstallationAddress installationAddress = null;

	private Boolean appointmentNeeded = null;

	private String earliestAvailableDate = null;

	private Float engineeringVisitCharge = null;

	private LineSpeeds lineSpeeds = null;

	private List<String> classificationCode = null;

	public AvailabilityCheckResponse journeyId(String journeyId) {
		this.journeyId = journeyId;
		return this;
	}

	/**
	 * Journey id of the broadband - Unique
	 * 
	 * @return journeyId
	 **/
	public String getJourneyId() {
		return journeyId;
	}

	public void setJourneyId(String journeyId) {
		this.journeyId = journeyId;
	}

	public AvailabilityCheckResponse installationAddress(InstallationAddress installationAddress) {
		this.installationAddress = installationAddress;
		return this;
	}

	/**
	 * Get installationAddress
	 * 
	 * @return installationAddress
	 **/
	public InstallationAddress getInstallationAddress() {
		return installationAddress;
	}

	public void setInstallationAddress(InstallationAddress installationAddress) {
		this.installationAddress = installationAddress;
	}

	public AvailabilityCheckResponse appointmentNeeded(Boolean appointmentNeeded) {
		this.appointmentNeeded = appointmentNeeded;
		return this;
	}

	/**
	 * Whether the appointment is needed or not. If appointmenr needed flag is
	 * false, it means customer has existing line if it is true it means
	 * customer does not have existing line and should only take a new line
	 * option
	 * 
	 * @return appointmentNeeded
	 **/
	public Boolean getAppointmentNeeded() {
		return appointmentNeeded;
	}

	public void setAppointmentNeeded(Boolean appointmentNeeded) {
		this.appointmentNeeded = appointmentNeeded;
	}

	public AvailabilityCheckResponse earliestAvailableDate(String earliestAvailableDate) {
		this.earliestAvailableDate = earliestAvailableDate;
		return this;
	}

	/**
	 * The earliest available date when the service will be available
	 * 
	 * @return earliestAvailableDate
	 **/
	public String getEarliestAvailableDate() {
		return earliestAvailableDate;
	}

	public void setEarliestAvailableDate(String earliestAvailableDate) {
		this.earliestAvailableDate = earliestAvailableDate;
	}

	public AvailabilityCheckResponse engineeringVisitCharge(Float engineeringVisitCharge) {
		this.engineeringVisitCharge = engineeringVisitCharge;
		return this;
	}

	/**
	 * Get engineeringVisitCharge
	 * 
	 * @return engineeringVisitCharge
	 **/
	public Float getEngineeringVisitCharge() {
		return engineeringVisitCharge;
	}

	public void setEngineeringVisitCharge(Float engineeringVisitCharge) {
		this.engineeringVisitCharge = engineeringVisitCharge;
	}

	public AvailabilityCheckResponse lineSpeeds(LineSpeeds lineSpeeds) {
		this.lineSpeeds = lineSpeeds;
		return this;
	}

	/**
	 * Get lineSpeeds
	 * 
	 * @return lineSpeeds
	 **/
	public LineSpeeds getLineSpeeds() {
		return lineSpeeds;
	}

	public void setLineSpeeds(LineSpeeds lineSpeeds) {
		this.lineSpeeds = lineSpeeds;
	}

	public AvailabilityCheckResponse classificationCode(List<String> classificationCode) {
		this.classificationCode = classificationCode;
		return this;
	}

	public AvailabilityCheckResponse addClassificationCodeItem(String classificationCodeItem) {
		if (this.classificationCode == null) {
			this.classificationCode = new ArrayList<String>();
		}
		this.classificationCode.add(classificationCodeItem);
		return this;
	}

	/**
	 * Get classificationCode
	 * 
	 * @return classificationCode
	 **/
	public List<String> getClassificationCode() {
		return classificationCode;
	}

	public void setClassificationCode(List<String> classificationCode) {
		this.classificationCode = classificationCode;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AvailabilityCheckResponse availabilityCheckResponse = (AvailabilityCheckResponse) o;
		return Objects.equals(this.journeyId, availabilityCheckResponse.journeyId)
				&& Objects.equals(this.installationAddress, availabilityCheckResponse.installationAddress)
				&& Objects.equals(this.appointmentNeeded, availabilityCheckResponse.appointmentNeeded)
				&& Objects.equals(this.earliestAvailableDate, availabilityCheckResponse.earliestAvailableDate)
				&& Objects.equals(this.engineeringVisitCharge, availabilityCheckResponse.engineeringVisitCharge)
				&& Objects.equals(this.lineSpeeds, availabilityCheckResponse.lineSpeeds)
				&& Objects.equals(this.classificationCode, availabilityCheckResponse.classificationCode);
	}

	@Override
	public int hashCode() {
		return Objects.hash(journeyId, installationAddress, appointmentNeeded, earliestAvailableDate,
				engineeringVisitCharge, lineSpeeds, classificationCode);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AvailabilityCheckResponse {\n");

		sb.append("    journeyId: ").append(toIndentedString(journeyId)).append("\n");
		sb.append("    installationAddress: ").append(toIndentedString(installationAddress)).append("\n");
		sb.append("    appointmentNeeded: ").append(toIndentedString(appointmentNeeded)).append("\n");
		sb.append("    earliestAvailableDate: ").append(toIndentedString(earliestAvailableDate)).append("\n");
		sb.append("    engineeringVisitCharge: ").append(toIndentedString(engineeringVisitCharge)).append("\n");
		sb.append("    lineSpeeds: ").append(toIndentedString(lineSpeeds)).append("\n");
		sb.append("    classificationCode: ").append(toIndentedString(classificationCode)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
