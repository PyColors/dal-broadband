/*
 * Broadband APIs
 * Braod band API for anonymous and logged in customer
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.vf.uk.dal.braodband.entity;

import java.util.Objects;

/**
 * LineSpeeds
 */
public class LineSpeeds {
  private Double maxDownSpeed = null;

  private Double minDownSpeed = null;

  private Double avgDownSpeed = null;

  private Double minGuaranteedDownSpeed = null;

  private Double maxUpSpeed = null;

  private Double minUpSpeed = null;

  private String bandwidthMeasure = null;

  public LineSpeeds maxDownSpeed(Double maxDownSpeed) {
    this.maxDownSpeed = maxDownSpeed;
    return this;
  }

   /**
   * The maximum download speed offered (in kilobits per second [kbps])
   * @return maxDownSpeed
  **/
  public Double getMaxDownSpeed() {
    return maxDownSpeed;
  }

  public void setMaxDownSpeed(Double maxDownSpeed) {
    this.maxDownSpeed = maxDownSpeed;
  }

  public LineSpeeds minDownSpeed(Double minDownSpeed) {
    this.minDownSpeed = minDownSpeed;
    return this;
  }

   /**
   * The minimum download speed offered (in kilobits per second [kbps])
   * @return minDownSpeed
  **/
  public Double getMinDownSpeed() {
    return minDownSpeed;
  }

  public void setMinDownSpeed(Double minDownSpeed) {
    this.minDownSpeed = minDownSpeed;
  }

  public LineSpeeds avgDownSpeed(Double avgDownSpeed) {
    this.avgDownSpeed = avgDownSpeed;
    return this;
  }

   /**
   * The average download speed offered (in kilobits per second [kbps])
   * @return avgDownSpeed
  **/
  public Double getAvgDownSpeed() {
    return avgDownSpeed;
  }

  public void setAvgDownSpeed(Double avgDownSpeed) {
    this.avgDownSpeed = avgDownSpeed;
  }

  public LineSpeeds minGuaranteedDownSpeed(Double minGuaranteedDownSpeed) {
    this.minGuaranteedDownSpeed = minGuaranteedDownSpeed;
    return this;
  }

   /**
   * The minimum guaranteed download speed offered (in kilobits per second [kbps])
   * @return minGuaranteedDownSpeed
  **/
  public Double getMinGuaranteedDownSpeed() {
    return minGuaranteedDownSpeed;
  }

  public void setMinGuaranteedDownSpeed(Double minGuaranteedDownSpeed) {
    this.minGuaranteedDownSpeed = minGuaranteedDownSpeed;
  }

  public LineSpeeds maxUpSpeed(Double maxUpSpeed) {
    this.maxUpSpeed = maxUpSpeed;
    return this;
  }

   /**
   * The max  upload speed offered (in kilobits per second [kbps])
   * @return maxUpSpeed
  **/
  public Double getMaxUpSpeed() {
    return maxUpSpeed;
  }

  public void setMaxUpSpeed(Double maxUpSpeed) {
    this.maxUpSpeed = maxUpSpeed;
  }

  public LineSpeeds minUpSpeed(Double minUpSpeed) {
    this.minUpSpeed = minUpSpeed;
    return this;
  }

   /**
   * The min upload speed offered (in kilobits per second [kbps])
   * @return minUpSpeed
  **/
  public Double getMinUpSpeed() {
    return minUpSpeed;
  }

  public void setMinUpSpeed(Double minUpSpeed) {
    this.minUpSpeed = minUpSpeed;
  }

  public LineSpeeds bandwidthMeasure(String bandwidthMeasure) {
    this.bandwidthMeasure = bandwidthMeasure;
    return this;
  }

   /**
   * Indicates whether the best speed is predicted or actual
   * @return bandwidthMeasure
  **/
  public String getBandwidthMeasure() {
    return bandwidthMeasure;
  }

  public void setBandwidthMeasure(String bandwidthMeasure) {
    this.bandwidthMeasure = bandwidthMeasure;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineSpeeds lineSpeeds = (LineSpeeds) o;
    return Objects.equals(this.maxDownSpeed, lineSpeeds.maxDownSpeed) &&
        Objects.equals(this.minDownSpeed, lineSpeeds.minDownSpeed) &&
        Objects.equals(this.avgDownSpeed, lineSpeeds.avgDownSpeed) &&
        Objects.equals(this.minGuaranteedDownSpeed, lineSpeeds.minGuaranteedDownSpeed) &&
        Objects.equals(this.maxUpSpeed, lineSpeeds.maxUpSpeed) &&
        Objects.equals(this.minUpSpeed, lineSpeeds.minUpSpeed) &&
        Objects.equals(this.bandwidthMeasure, lineSpeeds.bandwidthMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxDownSpeed, minDownSpeed, avgDownSpeed, minGuaranteedDownSpeed, maxUpSpeed, minUpSpeed, bandwidthMeasure);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineSpeeds {\n");
    
    sb.append("    maxDownSpeed: ").append(toIndentedString(maxDownSpeed)).append("\n");
    sb.append("    minDownSpeed: ").append(toIndentedString(minDownSpeed)).append("\n");
    sb.append("    avgDownSpeed: ").append(toIndentedString(avgDownSpeed)).append("\n");
    sb.append("    minGuaranteedDownSpeed: ").append(toIndentedString(minGuaranteedDownSpeed)).append("\n");
    sb.append("    maxUpSpeed: ").append(toIndentedString(maxUpSpeed)).append("\n");
    sb.append("    minUpSpeed: ").append(toIndentedString(minUpSpeed)).append("\n");
    sb.append("    bandwidthMeasure: ").append(toIndentedString(bandwidthMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

