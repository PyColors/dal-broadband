AWSTemplateFormatVersion: '2010-09-09'
Description: Application template for a microservice to be deployed to AWS.


Parameters:

  Environment:
    Description: The name of the environment that is being deployed to.
    Type: String
  contextpath:
    Description: Path to be suffixed to the ALB URL.
    Type: String
  Priority:
    Description: Match priority sequence number for listener rule on ALB
    Type: Number
  Cpu:
    Description: Proportion of CPU reserved for container (1-4096)
    Type: Number
  icpconfigjdbcUrl:
    Description: TBCX
    Type: String
  icpconfigjdbcUserName:
    Description: TBCX
    Type: String
  icpconfigjdbcUserPwd:
    Description: TBCX
    Type: String
  Memory:
    Description: Hard limit for memory in MB available to container
    Type: Number
  MemoryReservation:
    Description: Base memory in MB reserved for container
    Type: Number
  ecrlocation:
    Description: The account loaction of the ECR Repository.
    Type: String
  repositoryname:
    Description: Name of the ECR Repository for the Service. This will be created as part of the build and will have the same name as the git repo, Build and Release Name.
    Type: String
  Version:
    Description: Version to pass in logStreamPrefix
    Type: String
  DesiredCount:
    Description: Target number of containers to run on ECS cluster
    Type: Number
  MaxCapacity:
    Description: Max number of containers to run on ECS cluster
    Type: Number
  MinCapacity:
    Description: Min number of containers to run on ECS Cluster
    Type: Number
  buildnumber:
    Description: Build number from VSTS and Image tag. Used to better enable rollback.
    Type: String
  springredisbband:
    Description: Broadband redis host
    Type: String
  springredisbbandpass:
    Description: Broadband redis password.
    Type: String
  springredisttl:
    Description: Desired redis TTL
    Type: Number
  springredistimeout:
    Description: Desired redis timeout
    Type: Number
  springredisport:
    Description: Redis port
    Type: NUmber

Resources:

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroup
    Properties:
        Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
        Conditions:
          - Field: path-pattern
            Values:
            - !Sub /${contextpath}/*
        ListenerArn:
          Fn::ImportValue: !Sub digitalx-${Environment}-alb-mas-Listener
        Priority: !Ref Priority

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        HealthCheckProtocol: HTTPS
        Name: !Ref AWS::StackName
        Protocol: HTTPS
        Port: 8080
        HealthCheckPath: !Sub /${contextpath}/health
        Matcher:
          HttpCode: 200-299
        Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        VpcId:
          Fn::ImportValue: !Sub digitalx-${Environment}-vpc-VpcId
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
  

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
        Family: !Ref AWS::StackName
        TaskRoleArn:
          Fn::ImportValue: !Sub digitalx-${Environment}-ecs-mas-DefaultTaskRoleArn
        ContainerDefinitions:
        - Name: !Ref AWS::StackName

          Cpu: !Ref Cpu
          Environment:
            - Name: icp_config_jdbcUrl
              Value: !Ref icpconfigjdbcUrl
            - Name: icp_config_jdbcUserName
              Value: !Ref icpconfigjdbcUserName
            - Name: icp_config_jdbcUserPwd 
              Value: !Ref icpconfigjdbcUserPwd
            - Name: spring_redis_host
              Value: !Ref springredisbband
            - Name: spring_redis_password
              Value: !Ref springredisbbandpass
            - Name: spring_redis_host
              Value: !Ref springredisttl
            - Name: spring_redis_timeout
              Value: !Ref springredistimeout
            - Name: spring_redis_port
              Value: !Ref springredisport
          Memory: !Ref Memory
          MemoryReservation: 768
          Image: !Sub ${ecrlocation}/${repositoryname}:${buildnumber}
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: eu-west-1
              awslogs-stream-prefix: !Ref Version
  EcsService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ListenerRule
      - TaskDefinition
      - TargetGroup
    Properties:
      Cluster: !Sub digitalx-${Environment}-ecs-mas
      DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      Role:
          Fn::ImportValue: !Sub digitalx-${Environment}-ecs-mas-ServiceSchedulerRoleArn
      TaskDefinition: !Ref TaskDefinition

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
        MaxCapacity: !Ref MaxCapacity
        MinCapacity: !Ref MinCapacity
        ResourceId: !Sub service/digitalx-${Environment}-ecs-mas/${EcsService.Name}
        RoleARN:
          Fn::ImportValue: !Sub digitalx-${Environment}-ecs-mas-ScalableTargetRoleArn
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs

  ScalingPolicyUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
        PolicyName: !Sub ${AWS::StackName}-scale-up
        PolicyType: StepScaling
        ScalingTargetId: !Ref ScalableTarget
        StepScalingPolicyConfiguration:
          AdjustmentType: PercentChangeInCapacity
          Cooldown: 180
          MinAdjustmentMagnitude: 2
          StepAdjustments:
            - MetricIntervalLowerBound: 0
              ScalingAdjustment: 25

  ScalingPolicyDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
        PolicyName: !Sub ${AWS::StackName}-scale-down
        PolicyType: StepScaling
        ScalingTargetId: !Ref ScalableTarget
        StepScalingPolicyConfiguration:
          AdjustmentType: PercentChangeInCapacity
          Cooldown: 180
          MinAdjustmentMagnitude: 2
          StepAdjustments:
            - MetricIntervalLowerBound: 0
              ScalingAdjustment: -25

  CPUUtilizationHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Above high CPU threshold
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: digitalx-${Environment}-ecs-mas
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
        MetricName: CPUUtilization
        ComparisonOperator: GreaterThanThreshold
        Statistic: Average
        Period: 60
        EvaluationPeriods: 5
        Threshold: 90
        AlarmActions:
        - !Ref ScalingPolicyUp

  CPUUtilizationLowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmDescription: Below low CPU threshold
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: digitalx-${Environment}-ecs-mas
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
        MetricName: CPUUtilization
        ComparisonOperator: LessThanThreshold
        Statistic: Average
        Period: 60
        EvaluationPeriods: 5
        Threshold: 20
        AlarmActions:
        - !Ref ScalingPolicyDown